// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module design_1_v_frmbuf_wr_0_0_AXIvideo2MultiPixStr (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        s_axis_video_TDATA,
        s_axis_video_TVALID,
        s_axis_video_TREADY,
        s_axis_video_TKEEP,
        s_axis_video_TSTRB,
        s_axis_video_TUSER,
        s_axis_video_TLAST,
        s_axis_video_TID,
        s_axis_video_TDEST,
        img_V_val_0_V_din,
        img_V_val_0_V_full_n,
        img_V_val_0_V_write,
        img_V_val_1_V_din,
        img_V_val_1_V_full_n,
        img_V_val_1_V_write,
        img_V_val_2_V_din,
        img_V_val_2_V_full_n,
        img_V_val_2_V_write,
        img_V_val_3_V_din,
        img_V_val_3_V_full_n,
        img_V_val_3_V_write,
        img_V_val_4_V_din,
        img_V_val_4_V_full_n,
        img_V_val_4_V_write,
        img_V_val_5_V_din,
        img_V_val_5_V_full_n,
        img_V_val_5_V_write,
        HwReg_height_cast8_l_2_dout,
        HwReg_height_cast8_l_2_empty_n,
        HwReg_height_cast8_l_2_read,
        HwReg_width_cast9_lo_1_dout,
        HwReg_width_cast9_lo_1_empty_n,
        HwReg_width_cast9_lo_1_read,
        trunc_ln132_loc_chan,
        HwReg_height_cast8_l_1_din,
        HwReg_height_cast8_l_1_full_n,
        HwReg_height_cast8_l_1_write,
        HwReg_width_cast9_lo_din,
        HwReg_width_cast9_lo_full_n,
        HwReg_width_cast9_lo_write
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_pp1_stage0 = 9'd32;
parameter    ap_ST_fsm_state8 = 9'd64;
parameter    ap_ST_fsm_state9 = 9'd128;
parameter    ap_ST_fsm_state10 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [63:0] s_axis_video_TDATA;
input   s_axis_video_TVALID;
output   s_axis_video_TREADY;
input  [7:0] s_axis_video_TKEEP;
input  [7:0] s_axis_video_TSTRB;
input  [0:0] s_axis_video_TUSER;
input  [0:0] s_axis_video_TLAST;
input  [0:0] s_axis_video_TID;
input  [0:0] s_axis_video_TDEST;
output  [9:0] img_V_val_0_V_din;
input   img_V_val_0_V_full_n;
output   img_V_val_0_V_write;
output  [9:0] img_V_val_1_V_din;
input   img_V_val_1_V_full_n;
output   img_V_val_1_V_write;
output  [9:0] img_V_val_2_V_din;
input   img_V_val_2_V_full_n;
output   img_V_val_2_V_write;
output  [9:0] img_V_val_3_V_din;
input   img_V_val_3_V_full_n;
output   img_V_val_3_V_write;
output  [9:0] img_V_val_4_V_din;
input   img_V_val_4_V_full_n;
output   img_V_val_4_V_write;
output  [9:0] img_V_val_5_V_din;
input   img_V_val_5_V_full_n;
output   img_V_val_5_V_write;
input  [11:0] HwReg_height_cast8_l_2_dout;
input   HwReg_height_cast8_l_2_empty_n;
output   HwReg_height_cast8_l_2_read;
input  [11:0] HwReg_width_cast9_lo_1_dout;
input   HwReg_width_cast9_lo_1_empty_n;
output   HwReg_width_cast9_lo_1_read;
input  [2:0] trunc_ln132_loc_chan;
output  [11:0] HwReg_height_cast8_l_1_din;
input   HwReg_height_cast8_l_1_full_n;
output   HwReg_height_cast8_l_1_write;
output  [11:0] HwReg_width_cast9_lo_din;
input   HwReg_width_cast9_lo_full_n;
output   HwReg_width_cast9_lo_write;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg img_V_val_0_V_write;
reg img_V_val_1_V_write;
reg img_V_val_2_V_write;
reg img_V_val_3_V_write;
reg img_V_val_4_V_write;
reg img_V_val_5_V_write;
reg HwReg_height_cast8_l_2_read;
reg HwReg_width_cast9_lo_1_read;
reg HwReg_height_cast8_l_1_write;
reg HwReg_width_cast9_lo_write;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] s_axis_video_V_data_V_0_data_out;
wire    s_axis_video_V_data_V_0_vld_in;
wire    s_axis_video_V_data_V_0_vld_out;
wire    s_axis_video_V_data_V_0_ack_in;
reg    s_axis_video_V_data_V_0_ack_out;
reg   [63:0] s_axis_video_V_data_V_0_payload_A;
reg   [63:0] s_axis_video_V_data_V_0_payload_B;
reg    s_axis_video_V_data_V_0_sel_rd;
reg    s_axis_video_V_data_V_0_sel_wr;
wire    s_axis_video_V_data_V_0_sel;
wire    s_axis_video_V_data_V_0_load_A;
wire    s_axis_video_V_data_V_0_load_B;
reg   [1:0] s_axis_video_V_data_V_0_state;
wire    s_axis_video_V_data_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_user_V_0_data_out;
wire    s_axis_video_V_user_V_0_vld_in;
wire    s_axis_video_V_user_V_0_vld_out;
wire    s_axis_video_V_user_V_0_ack_in;
reg    s_axis_video_V_user_V_0_ack_out;
reg   [0:0] s_axis_video_V_user_V_0_payload_A;
reg   [0:0] s_axis_video_V_user_V_0_payload_B;
reg    s_axis_video_V_user_V_0_sel_rd;
reg    s_axis_video_V_user_V_0_sel_wr;
wire    s_axis_video_V_user_V_0_sel;
wire    s_axis_video_V_user_V_0_load_A;
wire    s_axis_video_V_user_V_0_load_B;
reg   [1:0] s_axis_video_V_user_V_0_state;
wire    s_axis_video_V_user_V_0_state_cmp_full;
reg   [0:0] s_axis_video_V_last_V_0_data_out;
wire    s_axis_video_V_last_V_0_vld_in;
wire    s_axis_video_V_last_V_0_vld_out;
wire    s_axis_video_V_last_V_0_ack_in;
reg    s_axis_video_V_last_V_0_ack_out;
reg   [0:0] s_axis_video_V_last_V_0_payload_A;
reg   [0:0] s_axis_video_V_last_V_0_payload_B;
reg    s_axis_video_V_last_V_0_sel_rd;
reg    s_axis_video_V_last_V_0_sel_wr;
wire    s_axis_video_V_last_V_0_sel;
wire    s_axis_video_V_last_V_0_load_A;
wire    s_axis_video_V_last_V_0_load_B;
reg   [1:0] s_axis_video_V_last_V_0_state;
wire    s_axis_video_V_last_V_0_state_cmp_full;
wire    s_axis_video_V_dest_V_0_vld_in;
reg    s_axis_video_V_dest_V_0_ack_out;
reg   [1:0] s_axis_video_V_dest_V_0_state;
reg    s_axis_video_TDATA_blk_n;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_pp1_stage0;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_pp1_stage0;
wire   [0:0] icmp_ln185_fu_522_p2;
wire   [0:0] or_ln189_fu_536_p2;
wire    ap_CS_fsm_state9;
wire   [0:0] ap_phi_mux_eol_2_i_i_i_phi_fu_452_p4;
reg    img_V_val_0_V_blk_n;
reg    ap_enable_reg_pp1_iter1;
reg   [0:0] icmp_ln185_reg_755;
reg    img_V_val_1_V_blk_n;
reg    img_V_val_2_V_blk_n;
reg    img_V_val_3_V_blk_n;
reg    img_V_val_4_V_blk_n;
reg    img_V_val_5_V_blk_n;
reg    HwReg_height_cast8_l_2_blk_n;
reg    HwReg_width_cast9_lo_1_blk_n;
reg    HwReg_height_cast8_l_1_blk_n;
reg    HwReg_width_cast9_lo_blk_n;
reg   [0:0] eol_reg_355;
reg   [59:0] axi_data_V_1_i_i_i_reg_366;
reg   [0:0] eol_0_i_i_i_reg_377;
reg   [10:0] j_0_i_i_i_reg_389;
reg   [0:0] axi_last_V_2_i_i_i_reg_400;
reg   [59:0] p_Val2_s_reg_413;
reg   [11:0] HwReg_height_cast8_l_reg_673;
reg    ap_block_state1;
reg   [11:0] HwReg_width_cast9_lo_2_reg_678;
wire    ap_CS_fsm_state2;
wire    grp_reg_unsigned_short_s_fu_468_ap_ready;
wire    grp_reg_unsigned_short_s_fu_468_ap_done;
wire    grp_reg_unsigned_short_s_fu_474_ap_ready;
wire    grp_reg_unsigned_short_s_fu_474_ap_done;
reg    ap_block_state2_on_subcall_done;
wire   [11:0] grp_reg_unsigned_short_s_fu_468_ap_return;
reg   [11:0] tmp_i_i_i_reg_689;
wire   [11:0] grp_reg_unsigned_short_s_fu_474_ap_return;
reg   [11:0] tmp_i_i_i_230_reg_694;
reg   [63:0] tmp_data_V_cast_i_reg_699;
reg   [0:0] tmp_last_V_reg_707;
wire   [59:0] trunc_ln321_fu_484_p1;
wire    ap_CS_fsm_state4;
reg   [10:0] tmp_i_reg_724;
wire   [0:0] icmp_ln212_fu_496_p2;
reg   [0:0] icmp_ln212_reg_729;
wire   [0:0] icmp_ln212_1_fu_501_p2;
reg   [0:0] icmp_ln212_1_reg_736;
wire   [0:0] icmp_ln182_fu_511_p2;
wire    ap_CS_fsm_state5;
wire   [11:0] i_fu_516_p2;
reg   [11:0] i_reg_750;
reg    ap_predicate_op78_read_state6;
reg    ap_block_state6_pp1_stage0_iter0;
wire    io_acc_block_signal_op104;
reg    ap_block_state7_pp1_stage0_iter1;
reg    ap_block_pp1_stage0_11001;
wire   [10:0] j_fu_527_p2;
wire   [9:0] tmp_val_5_V_fu_608_p3;
reg   [9:0] tmp_val_5_V_reg_768;
wire   [9:0] tmp_val_4_V_fu_622_p3;
reg   [9:0] tmp_val_4_V_reg_773;
wire   [9:0] tmp_val_3_V_fu_636_p3;
reg   [9:0] tmp_val_3_V_reg_778;
wire   [9:0] tmp_val_2_V_fu_643_p3;
reg   [9:0] tmp_val_2_V_reg_783;
wire   [9:0] tmp_val_1_V_fu_650_p3;
reg   [9:0] tmp_val_1_V_reg_788;
wire   [9:0] tmp_val_0_V_fu_657_p3;
reg   [9:0] tmp_val_0_V_reg_793;
reg    ap_block_state9;
wire   [59:0] tmp_data_V_1_fu_669_p1;
reg    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state6;
wire    grp_reg_unsigned_short_s_fu_468_ap_start;
wire    grp_reg_unsigned_short_s_fu_468_ap_idle;
wire    grp_reg_unsigned_short_s_fu_474_ap_start;
wire    grp_reg_unsigned_short_s_fu_474_ap_idle;
reg   [0:0] axi_last_V_0_i_i_i_reg_324;
reg   [0:0] axi_last_V_3_i_i_i_reg_425;
wire    ap_CS_fsm_state10;
reg   [59:0] axi_data_V_0_i_i_i_reg_334;
reg   [59:0] axi_data_V_3_i_i_i_reg_437;
reg   [11:0] i_0_i_i_i_reg_344;
reg   [0:0] ap_phi_mux_eol_phi_fu_358_p4;
reg   [59:0] ap_phi_mux_axi_data_V_1_i_i_i_phi_fu_369_p4;
reg   [0:0] ap_phi_mux_eol_0_i_i_i_phi_fu_381_p4;
wire   [0:0] ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_reg_400;
reg   [59:0] ap_phi_mux_p_Val2_s_phi_fu_417_p4;
wire   [59:0] tmp_data_V_fu_542_p1;
wire   [59:0] ap_phi_reg_pp1_iter0_p_Val2_s_reg_413;
wire    ap_CS_fsm_state8;
reg   [0:0] eol_2_i_i_i_reg_449;
reg    grp_reg_unsigned_short_s_fu_468_ap_start_reg;
reg    ap_block_state1_ignore_call23;
reg    grp_reg_unsigned_short_s_fu_474_ap_start_reg;
reg    ap_block_state1_ignore_call24;
reg   [0:0] sof_1_i_i_i_fu_246;
reg    ap_block_pp1_stage0_01001;
wire   [9:0] pix_val_3_V_fu_571_p4;
wire   [9:0] pix_val_5_V_fu_591_p4;
wire   [9:0] select_ln212_fu_601_p3;
wire   [9:0] pix_val_4_V_16_fu_581_p4;
wire   [9:0] select_ln212_2_fu_615_p3;
wire   [9:0] pix_val_0_V_fu_547_p4;
wire   [9:0] select_ln212_4_fu_629_p3;
wire   [9:0] pix_val_2_V_fu_561_p4;
wire   [9:0] pix_val_1_V_16_fu_557_p1;
wire   [0:0] tmp_user_V_fu_480_p1;
reg   [8:0] ap_NS_fsm;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_725;
reg    ap_condition_632;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 9'd1;
#0 s_axis_video_V_data_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_data_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_data_V_0_state = 2'd0;
#0 s_axis_video_V_user_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_user_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_user_V_0_state = 2'd0;
#0 s_axis_video_V_last_V_0_sel_rd = 1'b0;
#0 s_axis_video_V_last_V_0_sel_wr = 1'b0;
#0 s_axis_video_V_last_V_0_state = 2'd0;
#0 s_axis_video_V_dest_V_0_state = 2'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 grp_reg_unsigned_short_s_fu_468_ap_start_reg = 1'b0;
#0 grp_reg_unsigned_short_s_fu_474_ap_start_reg = 1'b0;
end

design_1_v_frmbuf_wr_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_468(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_468_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_468_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_468_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_468_ap_ready),
    .in_r(HwReg_height_cast8_l_reg_673),
    .ap_return(grp_reg_unsigned_short_s_fu_468_ap_return)
);

design_1_v_frmbuf_wr_0_0_reg_unsigned_short_s grp_reg_unsigned_short_s_fu_474(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_reg_unsigned_short_s_fu_474_ap_start),
    .ap_done(grp_reg_unsigned_short_s_fu_474_ap_done),
    .ap_idle(grp_reg_unsigned_short_s_fu_474_ap_idle),
    .ap_ready(grp_reg_unsigned_short_s_fu_474_ap_ready),
    .in_r(HwReg_width_cast9_lo_2_reg_678),
    .ap_return(grp_reg_unsigned_short_s_fu_474_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((icmp_ln182_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state6))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state6);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_468_ap_start_reg <= 1'b0;
    end else begin
        if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_468_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_468_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_468_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_reg_unsigned_short_s_fu_474_ap_start_reg <= 1'b0;
    end else begin
        if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
            grp_reg_unsigned_short_s_fu_474_ap_start_reg <= 1'b1;
        end else if ((grp_reg_unsigned_short_s_fu_474_ap_ready == 1'b1)) begin
            grp_reg_unsigned_short_s_fu_474_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_out == 1'b1) & (s_axis_video_V_data_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_rd <= ~s_axis_video_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_data_V_0_ack_in == 1'b1) & (s_axis_video_V_data_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_data_V_0_sel_wr <= ~s_axis_video_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b0)) | ((s_axis_video_V_data_V_0_state == 2'd3) & (s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_data_V_0_vld_in == 1'b0) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_data_V_0_ack_out == 1'b0) & (s_axis_video_V_data_V_0_vld_in == 1'b1)) & (s_axis_video_V_data_V_0_state == 2'd3)) | ((s_axis_video_V_data_V_0_state == 2'd1) & (s_axis_video_V_data_V_0_ack_out == 1'b1)) | ((s_axis_video_V_data_V_0_state == 2'd2) & (s_axis_video_V_data_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_data_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_dest_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b0)) | ((s_axis_video_V_dest_V_0_state == 2'd3) & (s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_dest_V_0_vld_in == 1'b0) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_dest_V_0_ack_out == 1'b0) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)) & (s_axis_video_V_dest_V_0_state == 2'd3)) | ((s_axis_video_V_dest_V_0_state == 2'd1) & (s_axis_video_V_dest_V_0_ack_out == 1'b1)) | ((s_axis_video_V_dest_V_0_state == 2'd2) & (s_axis_video_V_dest_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_dest_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_dest_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_out == 1'b1) & (s_axis_video_V_last_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_rd <= ~s_axis_video_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_last_V_0_ack_in == 1'b1) & (s_axis_video_V_last_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_last_V_0_sel_wr <= ~s_axis_video_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b0)) | ((s_axis_video_V_last_V_0_state == 2'd3) & (s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_last_V_0_vld_in == 1'b0) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_last_V_0_ack_out == 1'b0) & (s_axis_video_V_last_V_0_vld_in == 1'b1)) & (s_axis_video_V_last_V_0_state == 2'd3)) | ((s_axis_video_V_last_V_0_state == 2'd1) & (s_axis_video_V_last_V_0_ack_out == 1'b1)) | ((s_axis_video_V_last_V_0_state == 2'd2) & (s_axis_video_V_last_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_last_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_out == 1'b1) & (s_axis_video_V_user_V_0_vld_out == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_rd <= ~s_axis_video_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((s_axis_video_V_user_V_0_ack_in == 1'b1) & (s_axis_video_V_user_V_0_vld_in == 1'b1))) begin
            s_axis_video_V_user_V_0_sel_wr <= ~s_axis_video_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        s_axis_video_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end else if ((((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b0)) | ((s_axis_video_V_user_V_0_state == 2'd3) & (s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd1;
        end else if (((~((s_axis_video_V_user_V_0_vld_in == 1'b0) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) & ~((s_axis_video_V_user_V_0_ack_out == 1'b0) & (s_axis_video_V_user_V_0_vld_in == 1'b1)) & (s_axis_video_V_user_V_0_state == 2'd3)) | ((s_axis_video_V_user_V_0_state == 2'd1) & (s_axis_video_V_user_V_0_ack_out == 1'b1)) | ((s_axis_video_V_user_V_0_state == 2'd2) & (s_axis_video_V_user_V_0_vld_in == 1'b1)))) begin
            s_axis_video_V_user_V_0_state <= 2'd3;
        end else begin
            s_axis_video_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_data_V_0_i_i_i_reg_334 <= axi_data_V_3_i_i_i_reg_437;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_data_V_0_i_i_i_reg_334 <= trunc_ln321_fu_484_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        axi_data_V_1_i_i_i_reg_366 <= p_Val2_s_reg_413;
    end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        axi_data_V_1_i_i_i_reg_366 <= axi_data_V_0_i_i_i_reg_334;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_data_V_3_i_i_i_reg_437 <= axi_data_V_1_i_i_i_reg_366;
    end else if ((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_data_V_3_i_i_i_reg_437 <= tmp_data_V_1_fu_669_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        axi_last_V_0_i_i_i_reg_324 <= axi_last_V_3_i_i_i_reg_425;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        axi_last_V_0_i_i_i_reg_324 <= tmp_last_V_reg_707;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_632)) begin
        if (((or_ln189_fu_536_p2 == 1'd1) & (icmp_ln185_fu_522_p2 == 1'd0))) begin
            axi_last_V_2_i_i_i_reg_400 <= ap_phi_mux_eol_phi_fu_358_p4;
        end else if (((or_ln189_fu_536_p2 == 1'd0) & (icmp_ln185_fu_522_p2 == 1'd0))) begin
            axi_last_V_2_i_i_i_reg_400 <= s_axis_video_V_last_V_0_data_out;
        end else if ((1'b1 == 1'b1)) begin
            axi_last_V_2_i_i_i_reg_400 <= ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_reg_400;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        axi_last_V_3_i_i_i_reg_425 <= eol_reg_355;
    end else if ((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        axi_last_V_3_i_i_i_reg_425 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_0_i_i_i_reg_377 <= axi_last_V_2_i_i_i_reg_400;
    end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_0_i_i_i_reg_377 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        eol_2_i_i_i_reg_449 <= eol_0_i_i_i_reg_377;
    end else if ((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        eol_2_i_i_i_reg_449 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        eol_reg_355 <= axi_last_V_2_i_i_i_reg_400;
    end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        eol_reg_355 <= axi_last_V_0_i_i_i_reg_324;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        i_0_i_i_i_reg_344 <= i_reg_750;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        i_0_i_i_i_reg_344 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_fu_522_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        j_0_i_i_i_reg_389 <= j_fu_527_p2;
    end else if (((icmp_ln182_fu_511_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_i_i_i_reg_389 <= 11'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_632)) begin
        if (((or_ln189_fu_536_p2 == 1'd1) & (icmp_ln185_fu_522_p2 == 1'd0))) begin
            p_Val2_s_reg_413 <= ap_phi_mux_axi_data_V_1_i_i_i_phi_fu_369_p4;
        end else if (((or_ln189_fu_536_p2 == 1'd0) & (icmp_ln185_fu_522_p2 == 1'd0))) begin
            p_Val2_s_reg_413 <= tmp_data_V_fu_542_p1;
        end else if ((1'b1 == 1'b1)) begin
            p_Val2_s_reg_413 <= ap_phi_reg_pp1_iter0_p_Val2_s_reg_413;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_fu_522_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        sof_1_i_i_i_fu_246 <= 1'd0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        sof_1_i_i_i_fu_246 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_cast8_l_reg_673 <= HwReg_height_cast8_l_2_dout;
        HwReg_width_cast9_lo_2_reg_678 <= HwReg_width_cast9_lo_1_dout;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_750 <= i_fu_516_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        icmp_ln185_reg_755 <= icmp_ln185_fu_522_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        icmp_ln212_1_reg_736 <= icmp_ln212_1_fu_501_p2;
        icmp_ln212_reg_729 <= icmp_ln212_fu_496_p2;
        tmp_i_reg_724 <= {{tmp_i_i_i_230_reg_694[11:1]}};
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_A == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_A <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_data_V_0_load_B == 1'b1)) begin
        s_axis_video_V_data_V_0_payload_B <= s_axis_video_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_A == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_A <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_last_V_0_load_B == 1'b1)) begin
        s_axis_video_V_last_V_0_payload_B <= s_axis_video_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_A == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_A <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((s_axis_video_V_user_V_0_load_B == 1'b1)) begin
        s_axis_video_V_user_V_0_payload_B <= s_axis_video_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if (((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_data_V_cast_i_reg_699 <= s_axis_video_V_data_V_0_data_out;
        tmp_last_V_reg_707 <= s_axis_video_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_i_i_i_230_reg_694 <= grp_reg_unsigned_short_s_fu_474_ap_return;
        tmp_i_i_i_reg_689 <= grp_reg_unsigned_short_s_fu_468_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_fu_522_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        tmp_val_0_V_reg_793 <= tmp_val_0_V_fu_657_p3;
        tmp_val_1_V_reg_788 <= tmp_val_1_V_fu_650_p3;
        tmp_val_2_V_reg_783 <= tmp_val_2_V_fu_643_p3;
        tmp_val_3_V_reg_778 <= tmp_val_3_V_fu_636_p3;
        tmp_val_4_V_reg_773 <= tmp_val_4_V_fu_622_p3;
        tmp_val_5_V_reg_768 <= tmp_val_5_V_fu_608_p3;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_cast8_l_1_blk_n = HwReg_height_cast8_l_1_full_n;
    end else begin
        HwReg_height_cast8_l_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_cast8_l_1_write = 1'b1;
    end else begin
        HwReg_height_cast8_l_1_write = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_cast8_l_2_blk_n = HwReg_height_cast8_l_2_empty_n;
    end else begin
        HwReg_height_cast8_l_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_height_cast8_l_2_read = 1'b1;
    end else begin
        HwReg_height_cast8_l_2_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_cast9_lo_1_blk_n = HwReg_width_cast9_lo_1_empty_n;
    end else begin
        HwReg_width_cast9_lo_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_cast9_lo_1_read = 1'b1;
    end else begin
        HwReg_width_cast9_lo_1_read = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_cast9_lo_blk_n = HwReg_width_cast9_lo_full_n;
    end else begin
        HwReg_width_cast9_lo_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
        HwReg_width_cast9_lo_write = 1'b1;
    end else begin
        HwReg_width_cast9_lo_write = 1'b0;
    end
end

always @ (*) begin
    if ((icmp_ln185_fu_522_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state6 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state6 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_axi_data_V_1_i_i_i_phi_fu_369_p4 = p_Val2_s_reg_413;
    end else begin
        ap_phi_mux_axi_data_V_1_i_i_i_phi_fu_369_p4 = axi_data_V_1_i_i_i_reg_366;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_0_i_i_i_phi_fu_381_p4 = axi_last_V_2_i_i_i_reg_400;
    end else begin
        ap_phi_mux_eol_0_i_i_i_phi_fu_381_p4 = eol_0_i_i_i_reg_377;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        ap_phi_mux_eol_phi_fu_358_p4 = axi_last_V_2_i_i_i_reg_400;
    end else begin
        ap_phi_mux_eol_phi_fu_358_p4 = eol_reg_355;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_725)) begin
        if ((or_ln189_fu_536_p2 == 1'd1)) begin
            ap_phi_mux_p_Val2_s_phi_fu_417_p4 = ap_phi_mux_axi_data_V_1_i_i_i_phi_fu_369_p4;
        end else if ((or_ln189_fu_536_p2 == 1'd0)) begin
            ap_phi_mux_p_Val2_s_phi_fu_417_p4 = tmp_data_V_fu_542_p1;
        end else begin
            ap_phi_mux_p_Val2_s_phi_fu_417_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_413;
        end
    end else begin
        ap_phi_mux_p_Val2_s_phi_fu_417_p4 = ap_phi_reg_pp1_iter0_p_Val2_s_reg_413;
    end
end

always @ (*) begin
    if (((icmp_ln182_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_0_V_blk_n = img_V_val_0_V_full_n;
    end else begin
        img_V_val_0_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_0_V_write = 1'b1;
    end else begin
        img_V_val_0_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_1_V_blk_n = img_V_val_1_V_full_n;
    end else begin
        img_V_val_1_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_1_V_write = 1'b1;
    end else begin
        img_V_val_1_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_2_V_blk_n = img_V_val_2_V_full_n;
    end else begin
        img_V_val_2_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_2_V_write = 1'b1;
    end else begin
        img_V_val_2_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_3_V_blk_n = img_V_val_3_V_full_n;
    end else begin
        img_V_val_3_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_3_V_write = 1'b1;
    end else begin
        img_V_val_3_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_4_V_blk_n = img_V_val_4_V_full_n;
    end else begin
        img_V_val_4_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_4_V_write = 1'b1;
    end else begin
        img_V_val_4_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln185_reg_755 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_5_V_blk_n = img_V_val_5_V_full_n;
    end else begin
        img_V_val_5_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (icmp_ln185_reg_755 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        img_V_val_5_V_write = 1'b1;
    end else begin
        img_V_val_5_V_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | ((eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((or_ln189_fu_536_p2 == 1'd0) & (icmp_ln185_fu_522_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)))) begin
        s_axis_video_TDATA_blk_n = s_axis_video_V_data_V_0_state[1'd0];
    end else begin
        s_axis_video_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_data_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_data_V_0_sel == 1'b1)) begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_B;
    end else begin
        s_axis_video_V_data_V_0_data_out = s_axis_video_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_dest_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_dest_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_last_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_last_V_0_sel == 1'b1)) begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_B;
    end else begin
        s_axis_video_V_last_V_0_data_out = s_axis_video_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9)) | ((1'b0 == ap_block_pp1_stage0_11001) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0)) | ((s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3)))) begin
        s_axis_video_V_user_V_0_ack_out = 1'b1;
    end else begin
        s_axis_video_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((s_axis_video_V_user_V_0_sel == 1'b1)) begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_B;
    end else begin
        s_axis_video_V_user_V_0_data_out = s_axis_video_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b0 == ap_block_state2_on_subcall_done) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((tmp_user_V_fu_480_p1 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else if (((tmp_user_V_fu_480_p1 == 1'd1) & (s_axis_video_V_data_V_0_vld_out == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln182_fu_511_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln185_fu_522_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (icmp_ln185_fu_522_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if ((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (eol_2_i_i_i_reg_449 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if ((~((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0)) & (ap_phi_mux_eol_2_i_i_i_phi_fu_452_p4 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign HwReg_height_cast8_l_1_din = HwReg_height_cast8_l_2_dout;

assign HwReg_width_cast9_lo_din = HwReg_width_cast9_lo_1_dout;

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp1_stage0_01001 = (((icmp_ln185_reg_755 == 1'd0) & (io_acc_block_signal_op104 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_11001 = (((icmp_ln185_reg_755 == 1'd0) & (io_acc_block_signal_op104 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_pp1_stage0_subdone = (((icmp_ln185_reg_755 == 1'd0) & (io_acc_block_signal_op104 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b1)) | ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op78_read_state6 == 1'b1) & (ap_enable_reg_pp1_iter0 == 1'b1)));
end

always @ (*) begin
    ap_block_state1 = ((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call23 = ((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state1_ignore_call24 = ((1'b0 == HwReg_width_cast9_lo_full_n) | (1'b0 == HwReg_height_cast8_l_1_full_n) | (1'b0 == HwReg_width_cast9_lo_1_empty_n) | (1'b0 == HwReg_height_cast8_l_2_empty_n) | (ap_start == 1'b0) | (ap_done_reg == 1'b1));
end

always @ (*) begin
    ap_block_state2_on_subcall_done = ((grp_reg_unsigned_short_s_fu_474_ap_done == 1'b0) | (grp_reg_unsigned_short_s_fu_468_ap_done == 1'b0));
end

always @ (*) begin
    ap_block_state6_pp1_stage0_iter0 = ((s_axis_video_V_data_V_0_vld_out == 1'b0) & (ap_predicate_op78_read_state6 == 1'b1));
end

always @ (*) begin
    ap_block_state7_pp1_stage0_iter1 = ((icmp_ln185_reg_755 == 1'd0) & (io_acc_block_signal_op104 == 1'b0));
end

always @ (*) begin
    ap_block_state9 = ((eol_2_i_i_i_reg_449 == 1'd0) & (s_axis_video_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_condition_632 = ((1'b0 == ap_block_pp1_stage0_11001) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_725 = ((icmp_ln185_fu_522_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign ap_phi_mux_eol_2_i_i_i_phi_fu_452_p4 = eol_2_i_i_i_reg_449;

assign ap_phi_reg_pp1_iter0_axi_last_V_2_i_i_i_reg_400 = 'bx;

assign ap_phi_reg_pp1_iter0_p_Val2_s_reg_413 = 'bx;

always @ (*) begin
    ap_predicate_op78_read_state6 = ((or_ln189_fu_536_p2 == 1'd0) & (icmp_ln185_fu_522_p2 == 1'd0));
end

assign grp_reg_unsigned_short_s_fu_468_ap_start = grp_reg_unsigned_short_s_fu_468_ap_start_reg;

assign grp_reg_unsigned_short_s_fu_474_ap_start = grp_reg_unsigned_short_s_fu_474_ap_start_reg;

assign i_fu_516_p2 = (i_0_i_i_i_reg_344 + 12'd1);

assign icmp_ln182_fu_511_p2 = ((i_0_i_i_i_reg_344 == tmp_i_i_i_reg_689) ? 1'b1 : 1'b0);

assign icmp_ln185_fu_522_p2 = ((j_0_i_i_i_reg_389 == tmp_i_reg_724) ? 1'b1 : 1'b0);

assign icmp_ln212_1_fu_501_p2 = ((trunc_ln132_loc_chan == 3'd0) ? 1'b1 : 1'b0);

assign icmp_ln212_fu_496_p2 = ((trunc_ln132_loc_chan == 3'd1) ? 1'b1 : 1'b0);

assign img_V_val_0_V_din = tmp_val_0_V_reg_793;

assign img_V_val_1_V_din = tmp_val_1_V_reg_788;

assign img_V_val_2_V_din = tmp_val_2_V_reg_783;

assign img_V_val_3_V_din = tmp_val_3_V_reg_778;

assign img_V_val_4_V_din = tmp_val_4_V_reg_773;

assign img_V_val_5_V_din = tmp_val_5_V_reg_768;

assign io_acc_block_signal_op104 = (img_V_val_5_V_full_n & img_V_val_4_V_full_n & img_V_val_3_V_full_n & img_V_val_2_V_full_n & img_V_val_1_V_full_n & img_V_val_0_V_full_n);

assign j_fu_527_p2 = (j_0_i_i_i_reg_389 + 11'd1);

assign or_ln189_fu_536_p2 = (sof_1_i_i_i_fu_246 | ap_phi_mux_eol_0_i_i_i_phi_fu_381_p4);

assign pix_val_0_V_fu_547_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_417_p4[29:20]}};

assign pix_val_1_V_16_fu_557_p1 = ap_phi_mux_p_Val2_s_phi_fu_417_p4[9:0];

assign pix_val_2_V_fu_561_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_417_p4[19:10]}};

assign pix_val_3_V_fu_571_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_417_p4[59:50]}};

assign pix_val_4_V_16_fu_581_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_417_p4[39:30]}};

assign pix_val_5_V_fu_591_p4 = {{ap_phi_mux_p_Val2_s_phi_fu_417_p4[49:40]}};

assign s_axis_video_TREADY = s_axis_video_V_dest_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_ack_in = s_axis_video_V_data_V_0_state[1'd1];

assign s_axis_video_V_data_V_0_load_A = (s_axis_video_V_data_V_0_state_cmp_full & ~s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_load_B = (s_axis_video_V_data_V_0_state_cmp_full & s_axis_video_V_data_V_0_sel_wr);

assign s_axis_video_V_data_V_0_sel = s_axis_video_V_data_V_0_sel_rd;

assign s_axis_video_V_data_V_0_state_cmp_full = ((s_axis_video_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_data_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_data_V_0_vld_out = s_axis_video_V_data_V_0_state[1'd0];

assign s_axis_video_V_dest_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_ack_in = s_axis_video_V_last_V_0_state[1'd1];

assign s_axis_video_V_last_V_0_load_A = (s_axis_video_V_last_V_0_state_cmp_full & ~s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_load_B = (s_axis_video_V_last_V_0_state_cmp_full & s_axis_video_V_last_V_0_sel_wr);

assign s_axis_video_V_last_V_0_sel = s_axis_video_V_last_V_0_sel_rd;

assign s_axis_video_V_last_V_0_state_cmp_full = ((s_axis_video_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_last_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_last_V_0_vld_out = s_axis_video_V_last_V_0_state[1'd0];

assign s_axis_video_V_user_V_0_ack_in = s_axis_video_V_user_V_0_state[1'd1];

assign s_axis_video_V_user_V_0_load_A = (s_axis_video_V_user_V_0_state_cmp_full & ~s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_load_B = (s_axis_video_V_user_V_0_state_cmp_full & s_axis_video_V_user_V_0_sel_wr);

assign s_axis_video_V_user_V_0_sel = s_axis_video_V_user_V_0_sel_rd;

assign s_axis_video_V_user_V_0_state_cmp_full = ((s_axis_video_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign s_axis_video_V_user_V_0_vld_in = s_axis_video_TVALID;

assign s_axis_video_V_user_V_0_vld_out = s_axis_video_V_user_V_0_state[1'd0];

assign select_ln212_2_fu_615_p3 = ((icmp_ln212_reg_729[0:0] === 1'b1) ? pix_val_5_V_fu_591_p4 : pix_val_4_V_16_fu_581_p4);

assign select_ln212_4_fu_629_p3 = ((icmp_ln212_reg_729[0:0] === 1'b1) ? pix_val_4_V_16_fu_581_p4 : pix_val_0_V_fu_547_p4);

assign select_ln212_fu_601_p3 = ((icmp_ln212_reg_729[0:0] === 1'b1) ? pix_val_3_V_fu_571_p4 : pix_val_5_V_fu_591_p4);

assign tmp_data_V_1_fu_669_p1 = s_axis_video_V_data_V_0_data_out[59:0];

assign tmp_data_V_fu_542_p1 = s_axis_video_V_data_V_0_data_out[59:0];

assign tmp_user_V_fu_480_p1 = s_axis_video_V_user_V_0_data_out;

assign tmp_val_0_V_fu_657_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_0_V_fu_547_p4 : pix_val_1_V_16_fu_557_p1);

assign tmp_val_1_V_fu_650_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_1_V_16_fu_557_p1 : pix_val_2_V_fu_561_p4);

assign tmp_val_2_V_fu_643_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_2_V_fu_561_p4 : pix_val_0_V_fu_547_p4);

assign tmp_val_3_V_fu_636_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_3_V_fu_571_p4 : select_ln212_4_fu_629_p3);

assign tmp_val_4_V_fu_622_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_4_V_16_fu_581_p4 : select_ln212_2_fu_615_p3);

assign tmp_val_5_V_fu_608_p3 = ((icmp_ln212_1_reg_736[0:0] === 1'b1) ? pix_val_5_V_fu_591_p4 : select_ln212_fu_601_p3);

assign trunc_ln321_fu_484_p1 = tmp_data_V_cast_i_reg_699[59:0];

endmodule //design_1_v_frmbuf_wr_0_0_AXIvideo2MultiPixStr
